/* tslint:disable */
/* eslint-disable */
/**
 * Uta API
 * This is Uta API for PLANE_WEB.
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface PresenterDandelion
 */
export interface PresenterDandelion {
    /**
     * 
     * @type {string}
     * @memberof PresenterDandelion
     */
    'id'?: string;
    /**
     * 
     * @type {Array<number>}
     * @memberof PresenterDandelion
     */
    'image'?: Array<number>;
    /**
     * 
     * @type {string}
     * @memberof PresenterDandelion
     */
    'impression'?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PresenterDandelion
     */
    'is_native'?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PresenterDandelion
     */
    'landmark'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenterDandelion
     */
    'statement'?: string;
    /**
     * 
     * @type {string}
     * @memberof PresenterDandelion
     */
    'type'?: string;
}

/**
 * DandelionsApi - axios parameter creator
 * @export
 */
export const DandelionsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * タンポポの一覧を取得する。
         * @summary タンポポ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/dandelions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タンポポの単体を取得する。
         * @summary タンポポ単体取得
         * @param {string} id Dandelion ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsIdGet: async (id: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('dandelionsIdGet', 'id', id)
            const localVarPath = `/dandelions/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * タンポポを登録する。
         * @summary タンポポ登録
         * @param {File} image 写真
         * @param {string} statement 特徴
         * @param {string} lat 緯度
         * @param {string} lng 経度
         * @param {string} landmark 目印
         * @param {string} type 場所
         * @param {string} impression 感想
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsPost: async (image: File, statement: string, lat: string, lng: string, landmark: string, type: string, impression: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'image' is not null or undefined
            assertParamExists('dandelionsPost', 'image', image)
            // verify required parameter 'statement' is not null or undefined
            assertParamExists('dandelionsPost', 'statement', statement)
            // verify required parameter 'lat' is not null or undefined
            assertParamExists('dandelionsPost', 'lat', lat)
            // verify required parameter 'lng' is not null or undefined
            assertParamExists('dandelionsPost', 'lng', lng)
            // verify required parameter 'landmark' is not null or undefined
            assertParamExists('dandelionsPost', 'landmark', landmark)
            // verify required parameter 'type' is not null or undefined
            assertParamExists('dandelionsPost', 'type', type)
            // verify required parameter 'impression' is not null or undefined
            assertParamExists('dandelionsPost', 'impression', impression)
            const localVarPath = `/dandelions`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (image !== undefined) { 
                localVarFormParams.append('image', image as any);
            }
    
            if (statement !== undefined) { 
                localVarFormParams.append('statement', statement as any);
            }
    
            if (lat !== undefined) { 
                localVarFormParams.append('lat', lat as any);
            }
    
            if (lng !== undefined) { 
                localVarFormParams.append('lng', lng as any);
            }
    
            if (landmark !== undefined) { 
                localVarFormParams.append('landmark', landmark as any);
            }
    
            if (type !== undefined) { 
                localVarFormParams.append('type', type as any);
            }
    
            if (impression !== undefined) { 
                localVarFormParams.append('impression', impression as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DandelionsApi - functional programming interface
 * @export
 */
export const DandelionsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DandelionsApiAxiosParamCreator(configuration)
    return {
        /**
         * タンポポの一覧を取得する。
         * @summary タンポポ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dandelionsGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PresenterDandelion>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dandelionsGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タンポポの単体を取得する。
         * @summary タンポポ単体取得
         * @param {string} id Dandelion ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dandelionsIdGet(id: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PresenterDandelion>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dandelionsIdGet(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * タンポポを登録する。
         * @summary タンポポ登録
         * @param {File} image 写真
         * @param {string} statement 特徴
         * @param {string} lat 緯度
         * @param {string} lng 経度
         * @param {string} landmark 目印
         * @param {string} type 場所
         * @param {string} impression 感想
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async dandelionsPost(image: File, statement: string, lat: string, lng: string, landmark: string, type: string, impression: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.dandelionsPost(image, statement, lat, lng, landmark, type, impression, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DandelionsApi - factory interface
 * @export
 */
export const DandelionsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DandelionsApiFp(configuration)
    return {
        /**
         * タンポポの一覧を取得する。
         * @summary タンポポ一覧取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsGet(options?: any): AxiosPromise<Array<PresenterDandelion>> {
            return localVarFp.dandelionsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * タンポポの単体を取得する。
         * @summary タンポポ単体取得
         * @param {string} id Dandelion ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsIdGet(id: string, options?: any): AxiosPromise<PresenterDandelion> {
            return localVarFp.dandelionsIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * タンポポを登録する。
         * @summary タンポポ登録
         * @param {File} image 写真
         * @param {string} statement 特徴
         * @param {string} lat 緯度
         * @param {string} lng 経度
         * @param {string} landmark 目印
         * @param {string} type 場所
         * @param {string} impression 感想
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        dandelionsPost(image: File, statement: string, lat: string, lng: string, landmark: string, type: string, impression: string, options?: any): AxiosPromise<void> {
            return localVarFp.dandelionsPost(image, statement, lat, lng, landmark, type, impression, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DandelionsApi - object-oriented interface
 * @export
 * @class DandelionsApi
 * @extends {BaseAPI}
 */
export class DandelionsApi extends BaseAPI {
    /**
     * タンポポの一覧を取得する。
     * @summary タンポポ一覧取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DandelionsApi
     */
    public dandelionsGet(options?: AxiosRequestConfig) {
        return DandelionsApiFp(this.configuration).dandelionsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タンポポの単体を取得する。
     * @summary タンポポ単体取得
     * @param {string} id Dandelion ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DandelionsApi
     */
    public dandelionsIdGet(id: string, options?: AxiosRequestConfig) {
        return DandelionsApiFp(this.configuration).dandelionsIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * タンポポを登録する。
     * @summary タンポポ登録
     * @param {File} image 写真
     * @param {string} statement 特徴
     * @param {string} lat 緯度
     * @param {string} lng 経度
     * @param {string} landmark 目印
     * @param {string} type 場所
     * @param {string} impression 感想
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DandelionsApi
     */
    public dandelionsPost(image: File, statement: string, lat: string, lng: string, landmark: string, type: string, impression: string, options?: AxiosRequestConfig) {
        return DandelionsApiFp(this.configuration).dandelionsPost(image, statement, lat, lng, landmark, type, impression, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * UsersApi - axios parameter creator
 * @export
 */
export const UsersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary ログイン
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost: async (email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authLoginPost', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('authLoginPost', 'password', password)
            const localVarPath = `/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary アカウント登録
         * @param {string} lastName 苗字
         * @param {string} firstName 名前
         * @param {string} address 住所
         * @param {string} phoneNumber 電話
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost: async (lastName: string, firstName: string, address: string, phoneNumber: string, email: string, password: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'lastName' is not null or undefined
            assertParamExists('authSignupPost', 'lastName', lastName)
            // verify required parameter 'firstName' is not null or undefined
            assertParamExists('authSignupPost', 'firstName', firstName)
            // verify required parameter 'address' is not null or undefined
            assertParamExists('authSignupPost', 'address', address)
            // verify required parameter 'phoneNumber' is not null or undefined
            assertParamExists('authSignupPost', 'phoneNumber', phoneNumber)
            // verify required parameter 'email' is not null or undefined
            assertParamExists('authSignupPost', 'email', email)
            // verify required parameter 'password' is not null or undefined
            assertParamExists('authSignupPost', 'password', password)
            const localVarPath = `/auth/signup`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (lastName !== undefined) { 
                localVarFormParams.append('last_name', lastName as any);
            }
    
            if (firstName !== undefined) { 
                localVarFormParams.append('first_name', firstName as any);
            }
    
            if (address !== undefined) { 
                localVarFormParams.append('address', address as any);
            }
    
            if (phoneNumber !== undefined) { 
                localVarFormParams.append('phone_number', phoneNumber as any);
            }
    
            if (email !== undefined) { 
                localVarFormParams.append('email', email as any);
            }
    
            if (password !== undefined) { 
                localVarFormParams.append('password', password as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * UsersApi - functional programming interface
 * @export
 */
export const UsersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = UsersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary ログイン
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authLoginPost(email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authLoginPost(email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary アカウント登録
         * @param {string} lastName 苗字
         * @param {string} firstName 名前
         * @param {string} address 住所
         * @param {string} phoneNumber 電話
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async authSignupPost(lastName: string, firstName: string, address: string, phoneNumber: string, email: string, password: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.authSignupPost(lastName, firstName, address, phoneNumber, email, password, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async meGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.meGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * UsersApi - factory interface
 * @export
 */
export const UsersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = UsersApiFp(configuration)
    return {
        /**
         * 
         * @summary ログイン
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authLoginPost(email: string, password: string, options?: any): AxiosPromise<void> {
            return localVarFp.authLoginPost(email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary アカウント登録
         * @param {string} lastName 苗字
         * @param {string} firstName 名前
         * @param {string} address 住所
         * @param {string} phoneNumber 電話
         * @param {string} email メールアドレス
         * @param {string} password パスワード
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        authSignupPost(lastName: string, firstName: string, address: string, phoneNumber: string, email: string, password: string, options?: any): AxiosPromise<void> {
            return localVarFp.authSignupPost(lastName, firstName, address, phoneNumber, email, password, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary プロフィール取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        meGet(options?: any): AxiosPromise<void> {
            return localVarFp.meGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * UsersApi - object-oriented interface
 * @export
 * @class UsersApi
 * @extends {BaseAPI}
 */
export class UsersApi extends BaseAPI {
    /**
     * 
     * @summary ログイン
     * @param {string} email メールアドレス
     * @param {string} password パスワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public authLoginPost(email: string, password: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).authLoginPost(email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary アカウント登録
     * @param {string} lastName 苗字
     * @param {string} firstName 名前
     * @param {string} address 住所
     * @param {string} phoneNumber 電話
     * @param {string} email メールアドレス
     * @param {string} password パスワード
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public authSignupPost(lastName: string, firstName: string, address: string, phoneNumber: string, email: string, password: string, options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).authSignupPost(lastName, firstName, address, phoneNumber, email, password, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary プロフィール取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof UsersApi
     */
    public meGet(options?: AxiosRequestConfig) {
        return UsersApiFp(this.configuration).meGet(options).then((request) => request(this.axios, this.basePath));
    }
}


